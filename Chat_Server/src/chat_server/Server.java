/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package chat_server;
import java.io.*; // untuk pemanggilan input output yang terdapat pada print
import java.net.*; //untuk membuku pemrograman
import java.util.*; //untuk menambahkan fungsi
/**
 *
 * @author Brama Hendra Mahendra
 */
public class Server extends javax.swing.JFrame {

    /**
     * Creates new form Server
     */
    //pendeklarasian array dimana client output server dapat membentuk objek
    ArrayList clientOutputStreams;
    ArrayList<String> users;
    
    public class ClientHandler implements Runnable {
        BufferedReader reader;
        Socket sock;
        PrintWriter client;
        
        public ClientHandler(Socket clientSocket, PrintWriter user) {
            client = user;
            try {
                sock = clientSocket;
                InputStreamReader isReader = new InputStreamReader(sock.getInputStream());
                reader = new BufferedReader(isReader);
            } catch (Exception ex) {
                msg_area.append("Unexpected error..\n");
            }
        }
        
        @Override
        public void run() {
            String message, connect = "Connect", disconnect = "Disconnect", chat = "Chat";
            String[] data;
            
            try {
                while ((message = reader.readLine()) != null) {
                    msg_area.append("Received: " + message + "\n");
                    data = message.split(":");
                    for (String token:data) {
                        msg_area.append(token + "\n");
                    }
                    if (data[2].equals(connect)) { //jika connect
                        tellEveryone((data[0] + ":" + data[1] + ":" + chat));
                        userAdd(data[0]);
                    } else if (data[2].equals(disconnect)) { //jika disconnect
                        tellEveryone((data[0] + ":has disconnected." + ":" + chat));
                        userRemove(data[0]);
                    } else if (data[2].equals(chat)) { //agar semua client diberi tahu message.
                        tellEveryone(message);
                    } else {
                        msg_area.append("No Conditions were met. \n");
                    }
                }
            } catch (Exception ex) { //untuk menangkap kesalahan jika suatu fungsi tidak memiliki nilai
                msg_area.append("Lost a connections. \n");
                ex.printStackTrace();
                clientOutputStreams.remove(client);
            }
        }
        
        private void userRemove(String string) {
            throw new UnsupportedOperationException("Not supported yet."); //untuk mengubah body dari generate messagr
        }
    }
    
    
    
    public Server() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        msg_user = new javax.swing.JButton();
        msg_clean = new javax.swing.JButton();
        msg_mulai = new javax.swing.JButton();
        msg_selesai = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        msg_area = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        msg_user.setText("User Aktif");
        msg_user.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                msg_userActionPerformed(evt);
            }
        });

        msg_clean.setText("Clean");
        msg_clean.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                msg_cleanActionPerformed(evt);
            }
        });

        msg_mulai.setText("Mulai");
        msg_mulai.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                msg_mulaiActionPerformed(evt);
            }
        });

        msg_selesai.setText("Selesai");
        msg_selesai.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                msg_selesaiActionPerformed(evt);
            }
        });

        msg_area.setColumns(20);
        msg_area.setRows(5);
        jScrollPane1.setViewportView(msg_area);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(msg_clean, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(msg_user, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(111, 111, 111)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(msg_mulai, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(msg_selesai, javax.swing.GroupLayout.DEFAULT_SIZE, 196, Short.MAX_VALUE)))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 470, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(219, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 373, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(msg_user)
                    .addComponent(msg_mulai, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(msg_clean)
                    .addComponent(msg_selesai))
                .addContainerGap(64, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void msg_userActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_msg_userActionPerformed
        msg_area.append("\n User Aktif : \n");
        for (String current_user : users) { // unr=tuk mendeklarasikan user yg sedang aktif
            msg_area.append(current_user);
            msg_area.append("\n");
        }
    }//GEN-LAST:event_msg_userActionPerformed

    private void msg_mulaiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_msg_mulaiActionPerformed
        Thread starter = new Thread(new ServerStart());
        starter.start(); // mengambil dari text field sehingga client dapat melakukan suatu fungsi
        
        msg_area.append("Server started....\n");
    }//GEN-LAST:event_msg_mulaiActionPerformed

    private void msg_cleanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_msg_cleanActionPerformed
        msg_area.setText(""); //menghapus set text pada text field
    }//GEN-LAST:event_msg_cleanActionPerformed

    private void msg_selesaiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_msg_selesaiActionPerformed
        try{
            Thread.sleep(5000);
        } catch(InterruptedException ex) {
            Thread.currentThread().interrupt(); //untuk menangkal suatu kesalahan
        }
        tellEveryone("Server: is stopping and all users will be disconnected. \n:chat"); //untuk menanggulangi suatu kesalahan pada text area
        msg_area.append("Server stopping....\n");
        msg_area.setText("");
    }//GEN-LAST:event_msg_selesaiActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Server().setVisible(true);
            }
        });
    }
    
    public class ServerStart implements Runnable {
        @Override
        public void run () {
            clientOutputStreams = new ArrayList();
            users = new ArrayList();
            
            try { //apabila benar akan ditampilkan
                ServerSocket serverSock = new ServerSocket(2222);
                while (true) {
                    Socket clientSock = serverSock.accept();
                    PrintWriter writer = new PrintWriter(clientSock.getOutputStream());
                    clientOutputStreams.add(writer);
                    
                    Thread listener = new Thread(new ClientHandler(clientSock, writer));
                    listener.start();
                    msg_area.append("Got a connection \n");
                }
            } catch (Exception ex) { //untuk melihat suatu kesalahan
                msg_area.append("Error making a connection. \n");
            }
        }
    }
    
    public void userAdd(String data) { //untuk menambahkan user 
        String message, add = ": :Connect", done = "Server : :Done", name = data;
        msg_area.append("Before" + name + "added. \n");
        users.add(name);
        msg_area.append("After" + name + "added. \n");
        String[] tempList = new String[(users.size())];
        users.toArray(tempList);
        
        for (String token:tempList) {
            message = (token + add);
            tellEveryone(message);
        }
        tellEveryone(done);
    }

    public void userRemove(String data) { //untuk menghapus user 
        String message, add = ": :Connect", done = "Server : :Done", name = data;
        msg_area.append("Before" + name + "added. \n");
        users.remove(name);
        msg_area.append("After" + name + "added. \n");
        String[] tempList = new String[(users.size())];
        users.toArray(tempList);
        
        for (String token:tempList) {
            message = (token + add);
            tellEveryone(message);
        }
        tellEveryone(done);
    }
    
    public void tellEveryone(String message) { 
        Iterator it = clientOutputStreams.iterator();
        
        while   (it.hasNext()) { //untuk meanmpilkan pesan di clien 
            try {
                PrintWriter writer = (PrintWriter) it.next();
                writer.println(message);
                msg_area.append("Sending: " + message + "\n");
                writer.flush();
                msg_area.setCaretPosition(msg_area.getDocument().getLength());
            } catch (Exception ex) {
                msg_area.append("Error telling everyone. \n");
            }
        }
    }

    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea msg_area;
    private javax.swing.JButton msg_clean;
    private javax.swing.JButton msg_mulai;
    private javax.swing.JButton msg_selesai;
    private javax.swing.JButton msg_user;
    // End of variables declaration//GEN-END:variables
}
